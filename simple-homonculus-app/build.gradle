apply plugin: 'java'
apply plugin: 'eclipse'

group = 'org.devoware'
version = 1.0
sourceCompatibility = 1.8
ext.appName = 'Simple Homonculus App'
ext.appClass = 'org.devoware.simpleapp.SimpleApplication'

repositories {
    mavenCentral()
    maven { url 'https://github.com/cpdevoto/maven-repository/raw/master/' }
}

dependencies {
    runtime     'org.devoware:homonculus-bootstrap:1.0'

    compile     'org.slf4j:log4j-over-slf4j:1.7.21',
                'org.slf4j:jcl-over-slf4j:1.7.21',
                'ch.qos.logback:logback-core:1.1.7',
                'ch.qos.logback:logback-classic:1.1.7',
                'com.google.guava:guava:19.0',
                'com.fasterxml.jackson.core:jackson-core:2.8.1',
                'com.fasterxml.jackson.core:jackson-databind:2.8.1',
                'com.fasterxml.jackson.core:jackson-annotations:2.8.1',
                'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.1',
                'org.apache.commons:commons-lang3:3.4',
                'javax.validation:validation-api:1.1.0.Final',
                'org.hibernate:hibernate-validator:5.2.4.Final',
                'commons-beanutils:commons-beanutils-core:1.8.3',
                'org.glassfish:javax.el:3.0.0',
                'com.google.dagger:dagger:2.6',
                'org.devoware:homonculus-core:1.0',
                'org.devoware:homonculus-config:1.0',
                'org.devoware:homonculus-validators:1.0',
                 'io.dropwizard.metrics:metrics-core:3.1.0',
                'io.dropwizard.metrics:metrics-healthchecks:3.1.0',
                'io.dropwizard.metrics:metrics-jvm:3.1.0'
    
    compileOnly 'com.google.code.findbugs:annotations:3.0.1',
                'com.google.dagger:dagger-compiler:2.6'            
                
             
    testCompile 'junit:junit:4.12', 
                'org.mockito:mockito-core:1.10.19',
                'org.hamcrest:hamcrest-all:1.3'     
}

task deleteLibraries(type: Delete) {
   doFirst{
      file('lib').mkdirs()
   }
   delete file('lib').listFiles(), file('logs')
}

task copyLibraries(type: Copy) {
   doFirst{
      file('logs').mkdirs()
   }
   from configurations.compile, configurations.runtime
   into 'lib'
}

eclipse.project {
   buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
   natures 'edu.umd.cs.findbugs.plugin.eclipse.findbugsNature'
}

tasks.cleanEclipseJdt {
   doFirst {
       delete file("bin/${appName} - Start.launch"),
	          file("bin/${appName} - Stop.launch")
   }
}


eclipse {
  classpath {
    defaultOutputDir = file('classes')
    downloadSources = true
  }
}

eclipse.classpath.file {
    whenMerged { classpath ->
        def sourcePaths = []
        classpath.entries.each {entry ->
           if (entry.hasProperty('sourcePath') && entry.sourcePath.hasProperty('path')) {
             sourcePaths.add(entry.sourcePath.path)
           }
        }
        def sourcePathsXml = ""
        sourcePaths.each {path ->
          sourcePathsXml += """&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;archive detectRoot=&amp;quot;true&amp;quot; path=&amp;quot;${path}&amp;quot;/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.externalArchive&quot;/&gt;&#10;"""
        }

        def launchConfig1 = 
	    file("bin/${appName} - Start.launch")
	       
	    launchConfig1.text = """\
			<?xml version="1.0" encoding="UTF-8" standalone="no"?>
			<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">
			<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
			<listEntry value="/${project.name}"/>
			</listAttribute>
			<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
			<listEntry value="4"/>
			</listAttribute>
			<booleanAttribute key="org.eclipse.jdt.launching.ATTR_USE_START_ON_FIRST_THREAD" value="true"/>
			<stringAttribute key="org.eclipse.debug.core.source_locator_id" value="org.eclipse.jdt.launching.sourceLocator.JavaSourceLookupDirector"/>
			<stringAttribute key="org.eclipse.debug.core.source_locator_memento" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;sourceLookupDirector&gt;&#10;&lt;sourceContainers duplicates=&quot;false&quot;&gt;&#10;${sourcePathsXml}&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;javaProject name=&amp;quot;${project.name}&amp;quot;/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.jdt.launching.sourceContainer.javaProject&quot;/&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;default/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.default&quot;/&gt;&#10;&lt;/sourceContainers&gt;&#10;&lt;/sourceLookupDirector&gt;&#10;"/>
			<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
			<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8/&quot; javaProject=&quot;${project.name}&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
			<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/${project.name}/lib/homonculus-bootstrap-1.0.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;"/>
			</listAttribute>
			<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
			<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.devoware.homonculus.bootstrap.Bootstrap"/>
			<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="start ${project.name}.yml"/>
			<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="${project.name}"/>
			<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dbootstrap.class=${appClass} -Duser.timezone=GMT -Dlog.dir=../logs -Dlog.extra.appender=FILE"/>
			<stringAttribute key="org.eclipse.jdt.launching.WORKING_DIRECTORY" value="\${workspace_loc:${project.name}/bin}"/>
			</launchConfiguration>
	   """.stripIndent()

	   def launchConfig2 = 
	       file("bin/${appName} - Stop.launch")
	       
	    launchConfig2.text = """\
			<?xml version="1.0" encoding="UTF-8" standalone="no"?>
			<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">
			<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
			<listEntry value="/${project.name}"/>
			</listAttribute>
			<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
			<listEntry value="4"/>
			</listAttribute>
			<booleanAttribute key="org.eclipse.jdt.launching.ATTR_USE_START_ON_FIRST_THREAD" value="true"/>
			<stringAttribute key="org.eclipse.debug.core.source_locator_id" value="org.eclipse.jdt.launching.sourceLocator.JavaSourceLookupDirector"/>
			<stringAttribute key="org.eclipse.debug.core.source_locator_memento" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;sourceLookupDirector&gt;&#10;&lt;sourceContainers duplicates=&quot;false&quot;&gt;&#10;${sourcePathsXml}&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;javaProject name=&amp;quot;${project.name}&amp;quot;/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.jdt.launching.sourceContainer.javaProject&quot;/&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;default/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.default&quot;/&gt;&#10;&lt;/sourceContainers&gt;&#10;&lt;/sourceLookupDirector&gt;&#10;"/>
			<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
			<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8/&quot; javaProject=&quot;${project.name}&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
			<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/${project.name}/lib/homonculus-bootstrap-1.0.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;"/>
			</listAttribute>
			<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
			<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.devoware.homonculus.bootstrap.Bootstrap"/>
			<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="stop"/>
			<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="${project.name}"/>
			<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dbootstrap.class=${appClass} -Duser.timezone=GMT -Dlog.dir=../logs -Dlog.extra.appender=FILE"/>
			<stringAttribute key="org.eclipse.jdt.launching.WORKING_DIRECTORY" value="\${workspace_loc:${project.name}/bin}"/>
			</launchConfiguration>
	   """.stripIndent()
    }
}

task createPackage(dependsOn: build) {
    doLast {
        File dist = mkdir("${buildDir}/dist")
        File tmp = mkdir("${buildDir}/tmp/dist/${project.name}-${project.version}")
        tasks.withType(Jar).each { archiveTask ->
            copy {
                from archiveTask.archivePath
                into file("${tmp}/lib")
            }
        }
        copy {
            from configurations.compile, configurations.runtime
            into file("${tmp}/lib")
        }
        copy {
            from 'bin'
            into file("${tmp}/bin")
            exclude { details ->
                details.file.name.endsWith('.launch')
            }
        }
        copy {
            from 'config'
            into file("${tmp}/config")
        }
        mkdir("${tmp}/logs")
    }
}

task archive(dependsOn: createPackage, type: Tar) {
    File dist = file("${buildDir}/dist")
    File tmp = file("${buildDir}/tmp/dist")

    baseName = "${project.name}-${project.version}"
    destinationDir = dist
    from tmp
    compression = Compression.GZIP
}

tasks.clean.dependsOn(deleteLibraries)
tasks.cleanEclipse.dependsOn(deleteLibraries)
tasks.build.dependsOn(copyLibraries) 
tasks.eclipse.dependsOn(copyLibraries) 


